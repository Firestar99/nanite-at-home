[workspace]
members = [
	"asteroids",
	"space-asset",
	"space-asset-pipeline",
	"space-engine",
	"space-engine-shader",
	"space-engine-shader-builder",
	"vulkano-bindless/vulkano-bindless",
	"vulkano-bindless/vulkano-bindless-macros",
	"vulkano-bindless/vulkano-bindless-shaders",
	"vulkano-bindless/vulkano-bindless-shader-builder",
]
resolver = "2"



[workspace.package]
version = "0.1.0"
authors = ["Firestar99"]
edition = "2021"
license = "MIT"
repository = "https://gitlab.com/spacegamedev/space-rust"



[workspace.dependencies]
# members
asteroids = { path = "asteroids" }
space-asset = { path = "space-asset" }
space-asset-pipeline = { path = "space-asset-pipeline" }
space-engine = { path = "space-engine" }
space-engine-shader = { path = "space-engine-shader" }
space-engine-shader-builder = { path = "space-engine-shader-builder" }
vulkano-bindless = { path = "vulkano-bindless/vulkano-bindless" }
vulkano-bindless-shaders = { path = "vulkano-bindless/vulkano-bindless-shaders" }
vulkano-bindless-macros = { path = "vulkano-bindless/vulkano-bindless-macros" }
vulkano-bindless-shader-builder = { path = "vulkano-bindless/vulkano-bindless-shader-builder", default-features = false, features = ["use-installed-tools", "use-pretty-print"] }

# vulkan
# vulkano 0.35 development
vulkano = { git = "https://github.com/vulkano-rs/vulkano.git", rev = "94a32f153508c050d0e3db69abd9404c812a3ef7" }
vulkano-shaders = { git = "https://github.com/vulkano-rs/vulkano.git", rev = "94a32f153508c050d0e3db69abd9404c812a3ef7" }

winit = { version = "0.29" }

# rust-gpu
spirv-builder = { git = "https://github.com/Firestar99/rust-gpu", rev = "46dee4fdde9a40fa8da0dc83c598ccdf1bfd8c98", default-features = false }
spirv-std = { git = "https://github.com/Firestar99/rust-gpu", rev = "46dee4fdde9a40fa8da0dc83c598ccdf1bfd8c98" }

# async
futures = "0.3"
smol = "1.3.0"
rayon = "1.10"

# codegen
quote = "1.0"
proc-macro2 = "1.0"
syn = { version = "2.0", features = ["full", "extra-traits", "visit", "visit-mut"] }
paste = "1.0"
konst = "0.3"
prettyplease = "0.2"
proc-macro-crate = "3.1.0"

# bytes and numbers
glam = { version = "0.24", default-features = false, features = ["libm", "bytemuck"] }
bytemuck = { version = "1.13", features = ["min_const_generics"] }
bytemuck_derive = "1.4"
num-traits = { version = "0.2", default-features = false, features = ["libm"] }
num-derive = "0.3"
memoffset = "0.9.1"

# serde
rkyv = { version = "0.7" }
zstd = { version = "0.13" }

# model loader
gltf = "1.4.0"
image = { version = "0.24.7", default-features = false, features = ["jpeg", "png"] }
meshopt = "0.2.1"

# profiling
profiling = "1.0"
puffin_http = "0.16"

# other
once_cell = "1.18"
smallvec = { version = "1.11", features = ["const_generics", "const_new"] }
static_assertions = "1.1.0"
parking_lot = "0.12"
parking_lot_core = "0.9"
clap = { version = "4.5", features = ["derive"] }
loom = "0.7.1"
rand = "0.8"
ahash = "0.8"
crossbeam-queue = "0.3"
crossbeam-utils = "0.8"
rangemap = "1.5.1"
walkdir = "2.5.0"
anyhow = "1.0"



# Following is copied from rust-gpu workspace cargo.toml
# Enable incremental by default in release mode.
[profile.release]
incremental = true
# HACK(eddyb) this is the default but without explicitly specifying it, Cargo
# will treat the identical settings in `[profile.release.build-override]` below
# as different sets of `rustc` flags and will not reuse artifacts between them.
codegen-units = 256

# Compile build-dependencies in release mode with the same settings
# as regular dependencies (including the incremental enabled above).
[profile.release.build-override]
opt-level = 3
incremental = true
codegen-units = 256



# Optimize certain crates even in dev mode:
# model and image loading
[profile.dev.package.gltf]
opt-level = 3
[profile.dev.package.gltf-derive]
opt-level = 3
[profile.dev.package.gltf-json]
opt-level = 3
[profile.dev.package.image]
opt-level = 3
[profile.dev.package.png]
opt-level = 3
[profile.dev.package.jpeg-decoder]
opt-level = 3
