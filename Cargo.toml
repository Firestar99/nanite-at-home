[workspace]
members = [
	"meshlet-renderer",
	"models",
	"space-asset-disk",
	"space-asset-disk-shader",
	"space-asset-preprocess",
	"space-asset-rt",
	"space-asset-shader",
	"space-engine",
	"space-engine-shader",
	"space-engine-shader-builder",
]
resolver = "2"



[workspace.package]
version = "0.1.0"
authors = ["Firestar99"]
edition = "2021"
license = "MIT"
repository = "https://gitlab.com/spacegamedev/space-rust"

[workspace.lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(target_arch, values("spirv"))'] }



[workspace.dependencies]
# members
meshlet-renderer = { path = "meshlet-renderer" }
models = { path = "models" }
space-asset-disk = { path = "space-asset-disk" }
space-asset-disk-shader = { path = "space-asset-disk-shader" }
space-asset-preprocess = { path = "space-asset-preprocess" }
space-asset-rt = { path = "space-asset-rt" }
space-asset-shader = { path = "space-asset-shader" }
space-engine = { path = "space-engine" }
space-engine-shader = { path = "space-engine-shader" }
space-engine-shader-builder = { path = "space-engine-shader-builder" }

# rust-gpu-bindless
rust-gpu-bindless = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-core = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-buffer-content = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-egui = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-egui-shaders = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-macro-utils = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-macros = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-shaders = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-shader-builder = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }
rust-gpu-bindless-winit = { git = "https://github.com/Firestar99/rust-gpu-bindless.git", rev = "11b3cf34dea82cb063d84851988f2a1617e5144a" }

# vulkan
ash = "0.38.0"
ash-window = "0.13.0"
gpu-allocator = { version = "0.27.0", features = ["vulkan"] }
presser = "0.3.1"

winit = { version = "0.30" }

# rust-gpu
cargo-gpu = { git = "https://github.com/Rust-GPU/cargo-gpu", rev = "d097aa1cdcabb2f78b634f39614287b269000df4" }
spirv-std = { git = "https://github.com/Rust-GPU/rust-gpu", rev = "e6d017d5504c4441a84edcc27f4eca61de6fc8cf", features = ["bytemuck"] }

# async
futures = "0.3"
rayon = "1.10"
pollster = "0.4.0"

# codegen
quote = "1.0"
proc-macro2 = "1.0"
syn = { version = "2.0", features = ["full", "extra-traits", "visit", "visit-mut"] }
konst = "0.3"
prettyplease = "0.2"
proc-macro-crate = "3.1.0"

# bytes and numbers
glam = { version = "0.30.2", default-features = false, features = ["libm", "bytemuck"] }
libm = { version = "0.2", default-features = false }
bytemuck = { version = "1.13", features = ["min_const_generics"] }
bytemuck_derive = "1.4"
num-traits = { version = "0.2", default-features = false, features = ["libm"] }
num-derive = "0.4.2"
memoffset = "0.9.1"

# serde
rkyv = { version = "0.8.10", default-features = false, features = ["std", "pointer_width_64"] }
zstd = { version = "0.13" }

# model loader
gltf = { version = "1.4.0", default-features = false, features = ["names", "utils", "KHR_lights_punctual", "KHR_materials_specular"] }
image = { version = "0.25.6", default-features = false }
base64 = "0.22"
urlencoding = "2.1"
meshopt = "0.4"
metis = "0.2.1"
intel_tex_2 = "0.4.0"

# profiling
profiling = "1.0"
puffin_http = "0.16"

# egui
egui = "=0.29.1"
epaint = "=0.29.1"
egui-winit = "=0.29.1"
egui_demo_lib = "=0.29.1"

# other
once_cell = "1.18"
smallvec = { version = "1.11", features = ["const_generics", "const_new", "union"] }
static_assertions = "1.1.0"
parking_lot = "0.12"
clap = { version = "4.5", features = ["derive"] }
crossbeam-queue = "0.3"
crossbeam-utils = "0.8"
rangemap = "1.5.1"
walkdir = "2.5.0"
anyhow = "1.0"
num_enum = { version = "0.7.2", default-features = false }
bitflags = "2.6.0"
thiserror = "2.0.6"
approx = "0.5.1"
rustc-hash = "2.1.1"

[patch."https://github.com/Firestar99/rust-gpu-bindless.git"]
rust-gpu-bindless = { path = "rust-gpu-bindless/crates/bindless" }
rust-gpu-bindless-core = { path = "rust-gpu-bindless/crates/core" }
rust-gpu-bindless-buffer-content = { path = "rust-gpu-bindless/crates/buffer-content" }
rust-gpu-bindless-egui = { path = "rust-gpu-bindless/crates/egui" }
rust-gpu-bindless-egui-shaders = { path = "rust-gpu-bindless/crates/egui-shaders" }
rust-gpu-bindless-macro-utils = { path = "rust-gpu-bindless/crates/macro-utils" }
rust-gpu-bindless-macros = { path = "rust-gpu-bindless/crates/macros" }
rust-gpu-bindless-shaders = { path = "rust-gpu-bindless/crates/shaders" }
rust-gpu-bindless-shader-builder = { path = "rust-gpu-bindless/crates/shader-builder" }
rust-gpu-bindless-winit = { path = "rust-gpu-bindless/crates/winit" }



# Configuration to preprocess models from `models/build.rs` in release mode.
# The following is copied from rust-gpu workspace Cargo.toml, although with
# cargo-gpu we don't rely on it anymore for rustc_backend_spirv compilation.

# Enable incremental by default in release mode.
[profile.release]
incremental = true
# HACK(eddyb) this is the default but without explicitly specifying it, Cargo
# will treat the identical settings in `[profile.release.build-override]` below
# as different sets of `rustc` flags and will not reuse artifacts between them.
codegen-units = 256

# Compile build-dependencies in release mode with the same settings
# as regular dependencies (including the incremental enabled above).
[profile.release.build-override]
opt-level = 3
incremental = true
codegen-units = 256

# my additions to make build scripts always run in release, even on dev
[profile.dev]
incremental = true
codegen-units = 256

[profile.dev.build-override]
opt-level = 3
incremental = true
codegen-units = 256



# Optimize certain crates even in dev mode:
# model and image loading
[profile.dev.package.gltf]
opt-level = 3
[profile.dev.package.gltf-derive]
opt-level = 3
[profile.dev.package.gltf-json]
opt-level = 3
[profile.dev.package.zune-core]
opt-level = 3
[profile.dev.package.zune-jpeg]
opt-level = 3
[profile.dev.package.image]
opt-level = 3
[profile.dev.package.png]
opt-level = 3
[profile.dev.package.epaint]
opt-level = 3
[profile.dev.package.emath]
opt-level = 3
[profile.dev.package.ecolor]
opt-level = 3
